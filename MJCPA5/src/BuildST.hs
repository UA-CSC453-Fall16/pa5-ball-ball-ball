
-- BuildST.hs
--
-- Step (4) of compiling.
--
-- BuildST module takes the AST generated by Parser.hs and generates a symbold table using
-- the functions in SymbolTable.hs
--

module BuildST where

import SymbolTable  -- For SymbolTable type and functions
import Util         -- For AST type

-- entry point
genSymbolTable :: AST -> SymbolTable
genSymbolTable root = travisty (root, emptySymTab)

-- traverse is an illegal Haskell function name, what a travisty
travisty :: (AST, SymbolTable) -> SymbolTable
travisty (Prog main_class [], st) =  st
travisty (Prog main_class other_class, st) =  traverseClass (other_class, st)

traverseClass :: ([AST], SymbolTable) -> SymbolTable
traverseClass ([], st) = st
traverseClass ((Class methods class_name):otherClasses, st) = 
    let
        st0 = insertClass st class_name
        st1 = pushScope st0 class_name
        st2 = traverseMethods (methods, st1)
        st3 = popScope st2 
        -- st4 = traverseClass ((Class rest class_name), st3)
    in
        traverseClass (otherClasses, st3)

traverseMethods :: ([AST], SymbolTable) -> SymbolTable
traverseMethods ([], st)            = st
traverseMethods ((method:rest), st) = 
    let
        st1 = traverseMethod (method, st)
    in 
        traverseMethods ((rest), st1)

traverseMethod :: (AST, SymbolTable) -> SymbolTable
traverseMethod ((Method body method_name typesig), st) = insertMethod st method_name typesig
