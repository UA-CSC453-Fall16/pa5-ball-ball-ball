
-- BuildST.hs
--
-- Step (4) of compiling.
--
-- BuildST module takes the AST generated by Parser.hs and generates a symbold table using
-- the functions in SymbolTable.hs
--

module BuildST where

import SymbolTable  -- For SymbolTable type and functions
import Util         -- For AST type

-- entry point
genSymbolTable :: AST -> SymbolTable
genSymbolTable root = travisty (root, emptySymTab)

-- traverse is a Haskell keyword and cannot be used as our function name, what a travisty
travisty :: (AST, SymbolTable) -> SymbolTable
travisty (Prog main_class [], st) =  st
travisty (Prog main_class other_class, st) =  traverseClass (other_class, st)

traverseClass :: ([AST], SymbolTable) -> SymbolTable
traverseClass ([], st) = st
traverseClass ((Class variables methods class_name):otherClasses, st) = 
    let
        st0 = insertClass st class_name
        st1 = pushScope st0 class_name
        st2 = traverseVariables (variables, st1)
        st3 = traverseMethods (methods, st2)
        st4 = popScope st2 
    in
        traverseClass (otherClasses, st4)

traverseMethods :: (AST, SymbolTable) -> SymbolTable
traverseMethods ((MethDecl methods), st) = traverseMethods' (methods, st)

traverseMethods' :: ([AST], SymbolTable) -> SymbolTable
traverseMethods' ([], st)            = st
traverseMethods' ((method:rest), st) = 
    let
        st1 = traverseMethod (method, st)
    in 
        traverseMethods' (rest, st1)

traverseVariables :: (AST, SymbolTable) -> SymbolTable
traverseVariables ((VarDecl variables), st) = traverseVariables' (variables, st)

traverseVariables' :: ([AST], SymbolTable) -> SymbolTable
traverseVariables' ([], st)            = st
traverseVariables' ((variable:rest), st) = 
    let
        st1 = traverseVariable (variable, st)
    in 
        traverseVariables' (rest, st1)

traverseMethod :: (AST, SymbolTable) -> SymbolTable
traverseMethod ((Method _ _ method_name typesig), st) = insertMethod st method_name typesig

traverseVariable :: (AST, SymbolTable) -> SymbolTable
traverseVariable ((Variable typesig identifier), st) = insertVariable st identifier typesig