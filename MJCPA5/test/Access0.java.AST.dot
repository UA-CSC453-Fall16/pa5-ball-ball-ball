digraph {
6  [label = "C"];
5 -> 6
5  [label = " Invoke test0  "];
4 -> 5
4  [label = "Delay"];
3 -> 4
3  [label = "Body"];
2 -> 3
2  [label = "MainClass"];
13  [label = " IntArrayType deep; "];
14  [label = " ClassType D mine; "];
15  [label = " ClassType D mine2; "];
12 -> 15
12 -> 14
12 -> 13
12  [label = "VariableDeclarations"];
20  [label = " IntType val; "];
21  [label = " IntArrayType arr; "];
19 -> 21
19 -> 20
19  [label = "VariableDeclarations"];
28  [label = "IntLiteral 6"];
27 -> 28
27  [label = "IntArrayInstance"];
26 -> 27
26  [label = "ParenExp"];
31  [label = "IntLiteral 0"];
25 -> 31
25 -> 26
25  [label = "ArrayAccess: left[right]"];
24 -> 25
24  [label = "Assignment: val = "];
23 -> 24
23  [label = "Body"];
18 -> 23
18 -> 19
18  [label = "Method: public TS [] IntType test0()"];
37  [label = "VariableDeclarations"];
42  [label = "IntLiteral 5"];
41 -> 42
41  [label = "IntArrayInstance"];
40 -> 41
40  [label = "Assignment: deep = "];
46  [label = "IntLiteral 0"];
47  [label = "IntLiteral 3"];
45 -> 47
45 -> 46
45  [label = "deepArray Assignment: [left] = right "];
50  [label = " Id (deep) "];
49 -> 50
49  [label = "Return"];
39 -> 49
39 -> 45
39 -> 40
39  [label = "Body"];
36 -> 39
36 -> 37
36  [label = "Method: public TS [] IntArrayType test2()"];
55  [label = "VariableDeclarations"];
59  [label = "D"];
58 -> 59
58  [label = "Assignment: mine2 = "];
62  [label = " Id (mine2) "];
61 -> 62
61  [label = "Return"];
57 -> 61
57 -> 58
57  [label = "Body"];
54 -> 57
54 -> 55
54  [label = "Method: public TS [] (ClassType D) test3()"];
68  [label = " IntType a; "];
69  [label = " IntType b; "];
70  [label = " IntType c; "];
71  [label = " IntType d; "];
67 -> 71
67 -> 70
67 -> 69
67 -> 68
67  [label = "VariableDeclarations"];
75  [label = "this"];
74 -> 75
74  [label = " Invoke test2  "];
78  [label = "IntLiteral 1"];
79  [label = "IntLiteral 4"];
77 -> 79
77 -> 78
77  [label = "deepArray Assignment: [left] = right "];
82  [label = "D"];
81 -> 82
81  [label = "Assignment: mine = "];
88  [label = "this"];
87 -> 88
87  [label = " Invoke test3  "];
86 -> 87
86  [label = " Invoke init  "];
85 -> 86
85  [label = "ArrayLength"];
84 -> 85
84  [label = "Assignment: a = "];
96  [label = "this"];
95 -> 96
95  [label = " Invoke test2  "];
98  [label = " Id (a) "];
94 -> 98
94 -> 95
94  [label = "ArrayAccess: left[right]"];
93 -> 94
93  [label = "Assignment: d = "];
73 -> 93
73 -> 84
73 -> 81
73 -> 77
73 -> 74
73  [label = "Body"];
66 -> 73
66 -> 67
66  [label = "Method: public TS [] VoidType test()"];
17 -> 66
17 -> 54
17 -> 36
17 -> 18
17  [label = "MethodDeclarations"];
11 -> 17
11 -> 12
11  [label = "Class C"];
107  [label = " IntType vari; "];
108  [label = " IntArrayType dArr; "];
106 -> 108
106 -> 107
106  [label = "VariableDeclarations"];
112  [label = "VariableDeclarations"];
116  [label = "IntLiteral 3"];
115 -> 116
115  [label = "Assignment: vari = "];
114 -> 115
114  [label = "Body"];
111 -> 114
111 -> 112
111  [label = "Method: public TS [] VoidType set()"];
121  [label = "VariableDeclarations"];
126  [label = "IntLiteral 3"];
125 -> 126
125  [label = "IntArrayInstance"];
124 -> 125
124  [label = "Assignment: dArr = "];
130  [label = " Id (dArr) "];
129 -> 130
129  [label = "Return"];
123 -> 129
123 -> 124
123  [label = "Body"];
120 -> 123
120 -> 121
120  [label = "Method: public TS [] IntArrayType init()"];
136  [label = " ClassType D soHard; "];
135 -> 136
135  [label = "VariableDeclarations"];
140  [label = "D"];
139 -> 140
139  [label = "Assignment: soHard = "];
143  [label = " Id (soHard) "];
142 -> 143
142  [label = " Invoke set  "];
146  [label = " Id (soHard) "];
145 -> 146
145  [label = "Return"];
138 -> 145
138 -> 142
138 -> 139
138  [label = "Body"];
134 -> 138
134 -> 135
134  [label = "Method: public TS [] (ClassType D) hard()"];
110 -> 134
110 -> 120
110 -> 111
110  [label = "MethodDeclarations"];
105 -> 110
105 -> 106
105  [label = "Class D"];
1 -> 105
1 -> 11
1 -> 2
1  [label = "Prog"];
}
