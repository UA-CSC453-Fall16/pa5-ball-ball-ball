
==================== FINAL INTERFACE ====================
2016-12-02 01:11:47.305735405 UTC

interface main@main:TypeCheck 8001
  interface hash: 8f35fdee261d28349db0dbc3dfd1e474
  ABI hash: 5e431c127d35de3b7ed8eef8b47ba496
  export-list hash: cd233e695f946e972b45b525ef28d4a0
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 6ea86ecbb747c8bfd1b624d46b10840a
  sig of: Nothing
  used TH splices: False
  where
exports:
  TypeCheck.isReturn
  TypeCheck.tCheck
  TypeCheck.typeCheck
  TypeCheck.typeCheckInvoke
module dependencies: SymbolTable Util
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.0.0*
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.Err 3bba35a16538d33d424682ce66876cdd
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  SymbolTable b90fb4c94fd358f974b00611e879e3b3
  exports: 5fca622cbe27c3102def4ca0ee895dcb
  SymTab c65c491812df1aea296ace50350f3071
  SymbolTable d92ad99340eafabd98bc2c924485b05f
  getReturn f719f38690a2689a61971504ed1c0889
  lookupParamType d3b1859bb161d424d9fca28844b7bf74
  lookupTypeSig 098638e55d8771e0d162a6a86d8b771a
  popScope 51a115c819ed44a7f1f386f664da0edc
  pushScope d17c24900a5da636e56d039308b8dc7a
  setProgScope 7696ad981d4b72d6273e3be73da01cc4
import  -/  Util 584e30b3c8003828425244522b124edd
  exports: 6ebad5c4a934f78d2a8da097b4f64c2d
  AST 88b1d8d104bedf4e10abe56758f4c48a
  Add db81475a2c126d7c611d0f8b2e4f7f52
  Body d153fc4cffa24358844f2c9d3923ca5d
  Boolean e739b86a037718e2330f9cdaaafce984
  BooleanType 661eea5c4b454ea3ccf4a04e40879c26
  ButtonLiteral 4ad405580f89d5ea0c4b62a058c49b6a
  ByteCast cb6fb553e8a5070eabaff85fc6f90aba
  ByteType 2dbfbae615c60d81b613b3a7182ee089
  CheckButton 53ed53cdc30dd0aa807c1a76fb02f9f6
  Class a29d9e4aa2277ed1177c891a7d9c6fa2
  ColorLiteral a09646b113ce60663aec427bcb52f846
  Delay 5b82435487e812bf6960759028ebb880
  Epsilon 0e2368b12583e00d4e901fa8122311bd
  GetPixel 208060c1089d54665dccfbbb8d583336
  Identifier f478eb751275069f15e7e4de47d2d2da
  If e27db102bf0056b79af21adde1bf36ce
  Instance 1f8b789ceb1dc9c8b52369069df392c1
  IntLiteral 144ca1c2ffe233b0c950c624e8c02dcb
  IntType f24052e5e6d03b5090f1567cdf154497
  Invoke 394424b76f631cbc504d27941f93f06d
  LessThan 04de00e6959fa80e021133802ba7d0a3
  LogicalAnd f1b595ca577ba5d451a0424a7ce6f3c7
  LogicalEqual ca207935a5bed546edc0c82892c1b286
  LogicalNot f72502ca7b096bc637bacc2d6d74d751
  MainClass c643e2cf340b183c486690155e63d5b6
  MeggyButtonType 6ff0ae99e7fe6491ef79c0a62e153f7f
  MeggyColorType 73f19f4b58afeeb85f71476c58ea1009
  MeggyToneType 5b7ccae6bfc86776e91c142a0625023e
  Method e89e84b8d9a0031f06f1abb3017f45ad
  Mul 732a40472d91b8d45034e578d3314e1f
  ParenExp 86473db8b42f2e0d4008971bbffc96bb
  Prog 05b8d730c89ff5259eebdd22d173c52a
  Return c9835deb9c6b930c6065b5d2934971ae
  SetPixel 5c654e2487eb0cc6617806266d24b80d
  Sub e11a71115abf5a41f92f1cadd41f310a
  TS 17e2bdd4b8adc4f87694194faae61e6b
  ToneLiteral 808f067228df16294222666189597a3a
  ToneStart fc7760204e63c5e8b6673dfbf71619c0
  Type b11fd09e544b732e5075f4cb20dd6d55
  UnaryMinus 6ddef5ed6239e224ccba8881f3a776f9
  VoidType bb628c644700193b80f763345c48d96e
  While 89f69faf2123b482645b8da033ba9438
81b15953ea173fedcbf73c9806fa5372
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   TypeCheck.$trModule2
                   TypeCheck.$trModule1) -}
0ffc6e316dc5ea0f1906868f1f573484
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "TypeCheck"#) -}
1cd797861a3abac574916e930c26b450
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
4b37f7b60f2cc4e1ea3b86e0976b6e51
  $wtCheck :: Util.AST -> SymbolTable.SymbolTable -> Util.Type
  {- Arity: 2, Strictness: <S,1*U><L,U(U,U)>, Inline: [0] -}
b1d104c0e61687f09ae1e30842014064
  $wtypeCheck ::
    Util.AST -> SymbolTable.SymbolTable -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><L,U(U,U)>, Inline: [0],
     Unfolding: (\ (ww :: Util.AST) (ww1 :: SymbolTable.SymbolTable) ->
                 case TypeCheck.$wtCheck ww ww1 of wild {
                   Util.BooleanType -> TypeCheck.typeCheck9
                   Util.ByteType -> TypeCheck.typeCheck8
                   Util.IntType -> TypeCheck.typeCheck7
                   Util.VoidType -> GHC.Types.True
                   Util.MeggyColorType -> TypeCheck.typeCheck6
                   Util.MeggyButtonType -> TypeCheck.typeCheck5
                   Util.MeggyToneType -> TypeCheck.typeCheck4
                   Util.IntArrayType -> TypeCheck.typeCheck3
                   Util.ColorArrayType -> TypeCheck.typeCheck2
                   Util.Error -> TypeCheck.typeCheck1 }) -}
41e5f3ba8a7b49fe763b340e73000a5f
  $wtypeCheckInvoke ::
    [Util.AST]
    -> [(GHC.Base.String, Util.Type)]
    -> Util.Type
    -> GHC.Base.String
    -> SymbolTable.SymbolTable
    -> Util.Type
  {- Arity: 5, Strictness: <S,1*U><S,U><S,1*U><L,U><L,U(U,U)>,
     Inline: [0] -}
e3c561b95dea53e6229f0ae088528bc4
  isReturn :: Util.AST -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Util.AST) ->
                 case ds of wild {
                   DEFAULT -> GHC.Types.False Util.Return ds1 -> GHC.Types.True }) -}
30b67dc4bab039696e2a7b376fb25ec0
  tCheck :: (Util.AST, SymbolTable.SymbolTable) -> Util.Type
  {- Arity: 1, Strictness: <S(SL),1*U(1*U,U(U,U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (Util.AST, SymbolTable.SymbolTable)) ->
                 case w of ww { (,) ww1 ww2 -> TypeCheck.$wtCheck ww1 ww2 }) -}
3068de6814a2ebf4d99b1e1e142150a8
  typeCheck :: (Util.AST, SymbolTable.SymbolTable) -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S(SL),1*U(1*U,U(U,U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (Util.AST, SymbolTable.SymbolTable)) ->
                 case w of ww { (,) ww1 ww2 -> TypeCheck.$wtypeCheck ww1 ww2 }) -}
6f8be9035ad541a58807ea98842e8429
  typeCheck1 :: GHC.Types.Bool
  {- Strictness: x -}
d34d6aba8f02f904250ea83a7e4c754c
  typeCheck2 :: GHC.Types.Bool
  {- Strictness: x -}
2f3e3b768c1e1de63b7c97a0d7d2d163
  typeCheck3 :: GHC.Types.Bool
  {- Strictness: x -}
53533d1bf06e27c0f4b283d29f2f6741
  typeCheck4 :: GHC.Types.Bool
  {- Strictness: x -}
3c928f3ec0215d7ec435ee1ddb8f6fbe
  typeCheck5 :: GHC.Types.Bool
  {- Strictness: x -}
1e83c70f565a8959b06d037d7d6cbd16
  typeCheck6 :: GHC.Types.Bool
  {- Strictness: x -}
2e6affb3b4eef9653294f8899137900d
  typeCheck7 :: GHC.Types.Bool
  {- Strictness: x -}
87b2967db1a74ff2a59cfe45d02b86ab
  typeCheck8 :: GHC.Types.Bool
  {- Strictness: x -}
45fba0974e904a3f9906b1dc3f6d1807
  typeCheck9 :: GHC.Types.Bool
  {- Strictness: x -}
f312eb3f05f9705c57c3ae0769761c3b
  typeCheckInvoke ::
    ([Util.AST], [(GHC.Base.String, Util.Type)], Util.Type)
    -> GHC.Base.String -> SymbolTable.SymbolTable -> Util.Type
  {- Arity: 3, Strictness: <S(SSS),1*U(1*U,U,1*U)><L,U><L,U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: ([Util.AST], [(GHC.Base.String, Util.Type)], Util.Type))
                   (w1 :: GHC.Base.String)
                   (w2 :: SymbolTable.SymbolTable) ->
                 case w of ww { (,,) ww1 ww2 ww3 ->
                 TypeCheck.$wtypeCheckInvoke ww1 ww2 ww3 w1 w2 }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

