
==================== FINAL INTERFACE ====================
2016-12-01 05:14:59.660584461 UTC

interface main@main:BuildST 8001
  interface hash: b8ae4770b87d28793ca0b449d35bfe5c
  ABI hash: b7f7b37fafcdfcc11f24faf01e599695
  export-list hash: 1a141c93dfe39f8e2cef12ccfadd8e9f
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 6ea86ecbb747c8bfd1b624d46b10840a
  sig of: Nothing
  used TH splices: False
  where
exports:
  BuildST.genSymbolTable
  BuildST.traverseClass
  BuildST.traverseMethod
  BuildST.traverseMethods
  BuildST.travisty
module dependencies: SymbolTable Util
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.0.0*
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  SymbolTable d23a60d8b7f5d4c4a5976c5077e50e04
  exports: 5fca622cbe27c3102def4ca0ee895dcb
  SymbolTable 8e86e5b3dc08c88d59b8ccc5a39fa69b
  emptySymTab a999f739b1326da15a61b13b07ecd9c8
  insertClass 59443a27c9481e44fbafaad1c259f0ec
  insertMethod 96ace9d5be4bbe39f7ffdf53f67e6135
  popScope 2d2b4312dc5456c6758da373bee3b506
  pushScope 85518b141e07ca4962860b0d1b41ba82
import  -/  Util 8289d5fba27cd9a7e4a3433d9fbc0162
  exports: 3eb83b1dfe1a017918c549046bcbf987
  AST 0922ba89a2bf8d0d1eaf0fa9b00bd723
  Class e84484e29a7277ca76a45ebc7077c13b
  Method cd446c762db4b62d61687f44decb8eb2
  Prog 2222df4cb20b83d0437a5eff78700ea9
86c06accfa6c109b290360c97d551b66
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   BuildST.$trModule2
                   BuildST.$trModule1) -}
d8529b3122e104d5d189039f8d4c5d16
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "BuildST"#) -}
7db2c2dea35e5f88a4e387abd91c23bf
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
dcc7ae093f1f9f2aeda064d31136a15a
  $wtraverseClass ::
    [Util.AST]
    -> SymbolTable.Scope
    -> [GHC.Base.String]
    -> (# SymbolTable.Scope, [GHC.Base.String] #)
  {- Arity: 3, Strictness: <S,1*U><L,U><L,U>, Inline: [0] -}
93a361c0d2bf97ea3c187d920eefd1f4
  $wtraverseMethods ::
    [Util.AST]
    -> SymbolTable.Scope
    -> [GHC.Base.String]
    -> (# SymbolTable.Scope, [GHC.Base.String] #)
  {- Arity: 3, Strictness: <S,1*U><L,U><L,U>, Inline: [0] -}
5deeade403425e180eb5b17beab9fce3
  genSymbolTable :: Util.AST -> SymbolTable.SymbolTable
  {- Arity: 1, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (root :: Util.AST) ->
                 case root of wild {
                   DEFAULT -> BuildST.genSymbolTable1
                   Util.Prog main_class ds
                   -> case ds of wild1 {
                        [] -> SymbolTable.emptySymTab
                        : ipv ipv1
                        -> BuildST.traverseClass (wild1, SymbolTable.emptySymTab) } }) -}
af550faf4fb7e893b16d3555ab068abc
  genSymbolTable1 :: SymbolTable.SymbolTable
  {- Strictness: x -}
b2b6c53e416dc9b73a1b4ae2c6555ae9
  traverseClass ::
    ([Util.AST], SymbolTable.SymbolTable) -> SymbolTable.SymbolTable
  {- Arity: 1, Strictness: <S(SS),1*U(1*U,1*U(U,U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: ([Util.AST], SymbolTable.SymbolTable)) ->
                 case w of ww { (,) ww1 ww2 ->
                 case ww2 of ww3 { SymbolTable.SymTab ww4 ww5 ->
                 case BuildST.$wtraverseClass ww1 ww4 ww5 of ww6 { (#,#) ww7 ww8 ->
                 SymbolTable.SymTab ww7 ww8 } } }) -}
611a5edc8951a8d023c417f389a05f1c
  traverseMethod ::
    (Util.AST, SymbolTable.SymbolTable) -> SymbolTable.SymbolTable
  {- Arity: 1, Strictness: <S(SS(SS)),1*U(1*U,1*U(U,1*U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: (Util.AST, SymbolTable.SymbolTable)) ->
                 case ds of wild { (,) ds1 st ->
                 case ds1 of wild1 {
                   DEFAULT -> BuildST.traverseMethod1
                   Util.Method body method_name typesig
                   -> SymbolTable.insertMethod st method_name typesig } }) -}
b2b3abb7e73408efbe59fa3c981e8d68
  traverseMethod1 :: SymbolTable.SymbolTable
  {- Strictness: x -}
e1fc41cbe62e437650ce0483ca2d10a7
  traverseMethods ::
    ([Util.AST], SymbolTable.SymbolTable) -> SymbolTable.SymbolTable
  {- Arity: 1, Strictness: <S(SS),1*U(1*U,1*U(U,U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: ([Util.AST], SymbolTable.SymbolTable)) ->
                 case w of ww { (,) ww1 ww2 ->
                 case ww2 of ww3 { SymbolTable.SymTab ww4 ww5 ->
                 case BuildST.$wtraverseMethods
                        ww1
                        ww4
                        ww5 of ww6 { (#,#) ww7 ww8 ->
                 SymbolTable.SymTab ww7 ww8 } } }) -}
66783ad4ffd61f0d1d8dcecde16e8cc9
  travisty ::
    (Util.AST, SymbolTable.SymbolTable) -> SymbolTable.SymbolTable
  {- Arity: 1, Strictness: <S(SS),1*U(1*U,1*U(U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: (Util.AST, SymbolTable.SymbolTable)) ->
                 case ds of wild { (,) ds1 st ->
                 case ds1 of wild1 {
                   DEFAULT -> BuildST.genSymbolTable1
                   Util.Prog main_class ds2
                   -> case ds2 of wild2 {
                        [] -> st : ipv ipv1 -> BuildST.traverseClass (wild2, st) } } }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

