
==================== FINAL INTERFACE ====================
2016-12-02 01:11:46.205666333 UTC

interface main@main:BuildST 8001
  interface hash: c229c11807f79637ff1091fee640fac6
  ABI hash: 6283611e89c78cfca88f34370c3e3d4e
  export-list hash: 1a141c93dfe39f8e2cef12ccfadd8e9f
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 6ea86ecbb747c8bfd1b624d46b10840a
  sig of: Nothing
  used TH splices: False
  where
exports:
  BuildST.genSymbolTable
  BuildST.traverseClass
  BuildST.traverseMethod
  BuildST.traverseMethods
  BuildST.travisty
module dependencies: SymbolTable Util
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.0.0*
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  SymbolTable b90fb4c94fd358f974b00611e879e3b3
  exports: 5fca622cbe27c3102def4ca0ee895dcb
  SymbolTable d92ad99340eafabd98bc2c924485b05f
  emptySymTab 7e0ba2a930e67c694e3d91d4469d6125
  insertClass d55de0bd51164a4b59cc8f91e0af8f7c
  insertMethod ed3644cc840a44f4ccd6ad326bf0563d
  popScope 51a115c819ed44a7f1f386f664da0edc
  pushScope d17c24900a5da636e56d039308b8dc7a
import  -/  Util 584e30b3c8003828425244522b124edd
  exports: 6ebad5c4a934f78d2a8da097b4f64c2d
  AST 88b1d8d104bedf4e10abe56758f4c48a
  Class a29d9e4aa2277ed1177c891a7d9c6fa2
  Method e89e84b8d9a0031f06f1abb3017f45ad
  Prog 05b8d730c89ff5259eebdd22d173c52a
86c06accfa6c109b290360c97d551b66
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   BuildST.$trModule2
                   BuildST.$trModule1) -}
d8529b3122e104d5d189039f8d4c5d16
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "BuildST"#) -}
7db2c2dea35e5f88a4e387abd91c23bf
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
06d26b47e6274da2044bc5bcebc7cb84
  $wtraverseClass ::
    [Util.AST]
    -> SymbolTable.Scope
    -> [GHC.Base.String]
    -> (# SymbolTable.Scope, [GHC.Base.String] #)
  {- Arity: 3, Strictness: <S,1*U><L,U><L,U>, Inline: [0] -}
d1fe732c73556afae560af7d3b9a5bae
  $wtraverseMethods ::
    [Util.AST]
    -> SymbolTable.Scope
    -> [GHC.Base.String]
    -> (# SymbolTable.Scope, [GHC.Base.String] #)
  {- Arity: 3, Strictness: <S,1*U><L,U><L,U>, Inline: [0] -}
038d802c214bd39bdd6f2db9ce33d293
  genSymbolTable :: Util.AST -> SymbolTable.SymbolTable
  {- Arity: 1, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (root :: Util.AST) ->
                 case root of wild {
                   DEFAULT -> BuildST.genSymbolTable1
                   Util.Prog main_class ds
                   -> case ds of wild1 {
                        [] -> SymbolTable.emptySymTab
                        : ipv ipv1
                        -> BuildST.traverseClass (wild1, SymbolTable.emptySymTab) } }) -}
112c812276223d4e82b5525a570d3153
  genSymbolTable1 :: SymbolTable.SymbolTable
  {- Strictness: x -}
82595eb5da9b09095e63a30c279ed534
  traverseClass ::
    ([Util.AST], SymbolTable.SymbolTable) -> SymbolTable.SymbolTable
  {- Arity: 1, Strictness: <S(SS),1*U(1*U,1*U(U,U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: ([Util.AST], SymbolTable.SymbolTable)) ->
                 case w of ww { (,) ww1 ww2 ->
                 case ww2 of ww3 { SymbolTable.SymTab ww4 ww5 ->
                 case BuildST.$wtraverseClass ww1 ww4 ww5 of ww6 { (#,#) ww7 ww8 ->
                 SymbolTable.SymTab ww7 ww8 } } }) -}
5dcdaca9f2c4d23aefe3f6f6081f264d
  traverseMethod ::
    (Util.AST, SymbolTable.SymbolTable) -> SymbolTable.SymbolTable
  {- Arity: 1, Strictness: <S(SS(SS)),1*U(1*U,1*U(U,1*U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: (Util.AST, SymbolTable.SymbolTable)) ->
                 case ds of wild { (,) ds1 st ->
                 case ds1 of wild1 {
                   DEFAULT -> BuildST.traverseMethod1
                   Util.Method body method_name typesig
                   -> SymbolTable.insertMethod st method_name typesig } }) -}
ea2929b858a37afa51edeae5e8792ea5
  traverseMethod1 :: SymbolTable.SymbolTable
  {- Strictness: x -}
2e24c5718fa3d2c63166956bd1ffb810
  traverseMethods ::
    ([Util.AST], SymbolTable.SymbolTable) -> SymbolTable.SymbolTable
  {- Arity: 1, Strictness: <S(SS),1*U(1*U,1*U(U,U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: ([Util.AST], SymbolTable.SymbolTable)) ->
                 case w of ww { (,) ww1 ww2 ->
                 case ww2 of ww3 { SymbolTable.SymTab ww4 ww5 ->
                 case BuildST.$wtraverseMethods
                        ww1
                        ww4
                        ww5 of ww6 { (#,#) ww7 ww8 ->
                 SymbolTable.SymTab ww7 ww8 } } }) -}
db9aa1b10cf5f30a954014e9f1899bd3
  travisty ::
    (Util.AST, SymbolTable.SymbolTable) -> SymbolTable.SymbolTable
  {- Arity: 1, Strictness: <S(SS),1*U(1*U,1*U(U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: (Util.AST, SymbolTable.SymbolTable)) ->
                 case ds of wild { (,) ds1 st ->
                 case ds1 of wild1 {
                   DEFAULT -> BuildST.genSymbolTable1
                   Util.Prog main_class ds2
                   -> case ds2 of wild2 {
                        [] -> st : ipv ipv1 -> BuildST.traverseClass (wild2, st) } } }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

